# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  This product creates an AWS CodeBuild project that can be run to bootstrap an account. 
  It also includes an AWS Lambda function that can be used to back a custom resource 
  so that the CodeBuild project can be started from AWS CloudFormation
  {"framework": "servicecatalog-products", "role": "product", "product-set": "governance-at-scale-account-factory", "product": "account-bootstrap-shared", "version": "v3"}

Parameters:
  AssumableRoleArnInRootAccountForBootstrapping:
    Description: The ARN of the assumable role from the root account 
    Type: String
  GovernanceAtScaleAccountFactoryIAMRolePath:
    Description: The path to use for IAM roles in this template
    Type: String
  GovernanceAtScaleAccountFactoryAccountBootstrapSharedBootstrapperIAMRoleName:
    Description: The name to use for the IAM role that will be used by AWS CodeBuild to bootstrap spokes
    Type: String
  GovernanceAtScaleAccountFactoryAccountBootstrapSharedCustomResourceIAMRoleName:
    Description: The name to use for the IAM role that will be used by AWS Lambda to trigger a bootstrap
    Type: String

Resources:
  BootstrapperRole:
    Type: AWS::IAM::Role
    Properties:
      Description: An IAM service role used by the BootstrapperProject AWS CodeBuild project
      RoleName: !Ref GovernanceAtScaleAccountFactoryAccountBootstrapSharedBootstrapperIAMRoleName
      Path: !Ref GovernanceAtScaleAccountFactoryIAMRolePath
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  BootstrapperProject:
    Type: AWS::CodeBuild::Project
    Description: |
      An AWS CodeBuild project that:
        - Installs aws-service-catalog-puppet
        - Runs servicecatalog-puppet bootstrap-spoke-as
    Properties:
      Name: servicecatalog-puppet-single-account-bootstrapper
      Description: "Bootstraps an account for use with ServiceCatalog-Puppet"
      ServiceRole: !GetAtt BootstrapperRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        EnvironmentVariables:
          - Name: PUPPET_ACCOUNT_ID
            Type: PLAINTEXT
            Value: CHANGE_ME
          - Name: ORGANIZATION_ACCOUNT_ACCESS_ROLE_ARN
            Type: PLAINTEXT
            Value: CHANGE_ME
          - Name: VERSION
            Type: PLAINTEXT
            Value: CHANGE_ME
          - Name: ASSUMABLE_ROLE_IN_ROOT_ACCOUNT
            Type: PLAINTEXT
            Value: !Ref AssumableRoleArnInRootAccountForBootstrapping
          - Name: PUPPET_ROLE_NAME
            Type: PLAINTEXT
            Value: CHANGE_ME
          - Name: PUPPET_ROLE_PATH
            Type: PLAINTEXT
            Value: CHANGE_ME
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.8
              commands:
                - pip install aws-service-catalog-puppet==${VERSION}
            build:
              commands:
                - servicecatalog-puppet bootstrap-spoke-as ${PUPPET_ACCOUNT_ID} ${ASSUMABLE_ROLE_IN_ROOT_ACCOUNT} ${ORGANIZATION_ACCOUNT_ACCESS_ROLE_ARN} --puppet-role-name ${PUPPET_ROLE_NAME} --puppet-role-path ${PUPPET_ROLE_PATH}
      TimeoutInMinutes: 30

  BootstrapperProjectCustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      Description: | 
        An IAM Role that is used as an execution role for the 
        BootstrapperProjectCustomResource Lambda function
      RoleName: !Ref GovernanceAtScaleAccountFactoryAccountBootstrapSharedCustomResourceIAMRoleName
      Path: !Ref GovernanceAtScaleAccountFactoryIAMRolePath
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action:
              - "sts:AssumeRole"
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  BootstrapperProjectCustomResource:
    Type: AWS::Serverless::Function
    Description: |
      An AWS Lambda function that runs an AWS CodeBuild project to bootstrap an account for 
      Service Catalog Puppet. This Lambda function can be used to back a custom resource. 
      You can get the ARN by checking the SSM Parameter
      ```account-vending-bootstrapper-lambda```:
      ```yaml
      Account:
        Type: Custom::CustomResource
        Properties:
          ServiceToken: !Ref AccountVendingCreationLambda
          Email: !Ref Email
          AccountName: !Ref AccountName
          OrganizationAccountAccessRole: !Ref OrganizationAccountAccessRole
          IamUserAccessToBilling: !Ref IamUserAccessToBilling
          TargetOU: !Ref TargetOU
      ```
    Properties:
      CodeUri: ./src
      Handler: handler.handler
      Description: Lambda for accepting shares
      Role: !GetAtt BootstrapperProjectCustomResourceRole.Arn
      Runtime: python3.8
      Timeout: 900
      Environment:
        Variables:
          BOOTSTRAPPER_PROJECT_NAME: !Ref BootstrapperProject
          ASSUMABLE_ROLE_IN_ROOT_ACCOUNT_ARN: !Ref AssumableRoleArnInRootAccountForBootstrapping

Outputs:
  GovernanceAtScaleAccountFactoryBootstrapperProjectCustomResourceArn:
    Description: |
      Outputs the BootstrapperProjectCustomResource Arn so others can use it
    Value: !GetAtt BootstrapperProjectCustomResource.Arn