# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: 2010-09-09
Description: |
  Lambda to back a custom resource that dispatches notifications to an included SNS Topic
  {"version": "v1", "framework": "servicecatalog-products", "role": "product", "product-set": "aws-control-tower-augmented-account-factory", "product": "account-creation-notifier"}

Resources:
  SNSTopic:
    Type: AWS::SNS::Topic
    Description: SNS Topic others can subscribe to so that they can find out about account creations
    Properties:
      TopicName: account-creations

  Function:
    Description: |
      Lambda function to dispatch notifications to the SNSTopic
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'account-creation-notifier'
      Handler: index.lambda_handler
      Timeout: 10
      Role: !GetAtt Role.Arn
      Runtime: python3.7
      Environment:
        Variables:
          SNS_TOPIC: !Ref SNSTopic
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import os
          import json

          def construct_message(event):
              return {
                  'AccountName': event['ResourceProperties']['AccountName'],
                  'AccountEmail': event['ResourceProperties']['AccountEmail'],
                  'SSOUserFirstName': event['ResourceProperties']['SSOUserFirstName'],
                  'SSOUserLastName': event['ResourceProperties']['SSOUserLastName'],
                  'SSOUserEmail': event['ResourceProperties']['SSOUserEmail'],
                  'ManagedOrganizationalUnit': event['ResourceProperties']['ManagedOrganizationalUnit'],
                  'AccountId': event['ResourceProperties']['AccountId'],
              }

          def lambda_handler(event, context):
              message = construct_message(event)
              sns_client = boto3.client('sns')
              sns_client.publish(
                  TopicArn=os.getenv('SNS_TOPIC'),
                  Message=json.dumps(message),
                  Subject=f"Account: {event['ResourceProperties']['AccountName']} was created"
              )
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

  Role:
    Type: AWS::IAM::Role
    Description: |
      IAM role needed to publish account creations to SNS.
    Properties:
      Path: /aws-control-tower-augmented-account-factory/

      Policies:
        - PolicyName: PublishPerms
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref SNSTopic

      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

Outputs:
  SNSTopic:
    Description: |
      Outputs the SNS topic
    Value: !Ref SNSTopic

  SNSTopicName:
    Description: |
      Outputs the SNS topic name
    Value: !GetAtt SNSTopic.TopicName

  AccountCreationNotifierCustomResourceArn:
    Description: |
      Arn of lambda that can be used to back custom resources to notify others that accounts have been created
    Value: !GetAtt Function.Arn
